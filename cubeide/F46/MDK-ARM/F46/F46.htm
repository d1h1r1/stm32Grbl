<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [F46\F46.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image F46\F46.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Sun Apr 20 23:02:42 2025
<BR><P>
<H3>Maximum Stack Usage =        824 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[79]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[c6]">delay_sec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c9]">protocol_execute_realtime</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from stm32f4xx_it.o(.text.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from stm32f4xx_it.o(.text.TIM7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[17f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[180]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[60]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[181]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[182]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[61]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[183]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))

<P><STRONG><a name="[184]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[68]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[63]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[185]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[186]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[187]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[188]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[189]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[190]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[191]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[192]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[193]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[194]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[195]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[196]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[197]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[198]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[199]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[6d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[19a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[19b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[19c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[19d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[19e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[19f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1a0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1a1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[65]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[67]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[69]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1a4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a5]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[d8]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1a9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[77]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[70]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1ae]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[6b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1b2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>Analog_Timer_Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(.text.Analog_Timer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inoutputs_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_analog_init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HandleLimitIT &rArr; GetLimitsState &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLimitIT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>EnableLimitsINT</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, stm32utilities.o(.text.EnableLimitsINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EnableLimitsINT &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
</UL>

<P><STRONG><a name="[ae]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[cc]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(.text.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[82]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[84]"></a>GPIO_ResetBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32utilities.o(.text.GPIO_ResetBits))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inoutputs_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_stop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_digital_action
</UL>

<P><STRONG><a name="[85]"></a>GPIO_SetBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32utilities.o(.text.GPIO_SetBits))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_digital_action
</UL>

<P><STRONG><a name="[86]"></a>GetLimitsState</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, stm32utilities.o(.text.GetLimitsState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetLimitsState &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLimitIT
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
</UL>

<P><STRONG><a name="[87]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
</UL>

<P><STRONG><a name="[cd]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[88]"></a>HAL_FLASH_Program</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[cb]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[89]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>HAL_GPIO_Init</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[7f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLimitsState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableLimitsINT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInputByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[83]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_on_input_action
</UL>

<P><STRONG><a name="[8a]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_HalfDuplex_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_HalfDuplex_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_I2C_Init</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[8e]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[91]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>HAL_InitTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[94]"></a>HAL_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[ac]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[96]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[9a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 940 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>HAL_SPI_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_SPI_Receive</STRONG> (Thumb, 512 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLimitsState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableLimitsINT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInputByte
</UL>

<P><STRONG><a name="[80]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLimitsState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableLimitsINT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInputByte
</UL>

<P><STRONG><a name="[9d]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 838 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[95]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[8b]"></a>HAL_UART_MspInit</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[7c]"></a>HandleControlIT</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, system_1.o(.text.HandleControlIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>HandleLimitIT</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, limits_1.o(.text.HandleLimitIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HandleLimitIT &rArr; GetLimitsState &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLimitsState
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HandleStepResetIT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stepper_1.o(.text.HandleStepResetIT))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>HandleStepSetIT</STRONG> (Thumb, 734 bytes, Stack size 24 bytes, stepper_1.o(.text.HandleStepSetIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandleStepSetIT &rArr; probe_state_monitor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_speed
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_state_monitor
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>HandleUartIT</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, serial_1.o(.text.HandleUartIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandleUartIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_motion_override_flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_accessory_override_flag
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>LL_GPIO_Init</STRONG> (Thumb, 240 bytes, Stack size 44 bytes, stm32f4xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[aa]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[b3]"></a>LL_TIM_BDTR_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_BDTR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_BDTR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[b1]"></a>LL_TIM_Init</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b2]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[a9]"></a>LL_USART_Init</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, stm32f4xx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[ab]"></a>MX_GPIO_Init</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>MX_I2C1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>MX_SPI3_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi.o(.text.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>MX_TIM1_Init</STRONG> (Thumb, 370 bytes, Stack size 128 bytes, tim.o(.text.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MX_TIM1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>MX_TIM2_Init</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, tim.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_TIM2_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>MX_TIM3_Init</STRONG> (Thumb, 352 bytes, Stack size 104 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_TIM3_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>MX_TIM5_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_TIM5_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>MX_TIM7_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_TIM7_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>MX_UART5_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART5_Init &rArr; HAL_HalfDuplex_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>ReadInputByte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32utilities.o(.text.ReadInputByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadInputByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_on_input_action
</UL>

<P><STRONG><a name="[bc]"></a>SPIInit</STRONG> (Thumb, 1146 bytes, Stack size 48 bytes, stm32utilities.o(.text.SPIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SPIInit &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_limits_init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM5_IRQHandler &rArr; HandleStepSetIT &rArr; probe_state_monitor
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.TIM7_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepResetIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HandleUartIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>acceleration_scaling</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, settings_1.o(.text.acceleration_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = acceleration_scaling &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[122]"></a>convert_delta_vector_to_unit_vector</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, nuts_bolts_1.o(.text.convert_delta_vector_to_unit_vector))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[146]"></a>coolant_get_state</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, coolant_control_1.o(.text.coolant_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[c2]"></a>coolant_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, coolant_control_1.o(.text.coolant_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coolant_init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>coolant_set_state</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, coolant_control_1.o(.text.coolant_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coolant_set_state
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[c4]"></a>coolant_stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, coolant_control_1.o(.text.coolant_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coolant_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>

<P><STRONG><a name="[c5]"></a>coolant_sync</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, coolant_control_1.o(.text.coolant_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = coolant_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[a4]"></a>delay_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nuts_bolts_1.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[c6]"></a>delay_sec</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nuts_bolts_1.o(.text.delay_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[ca]"></a>eeprom_flush</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, eeprom_1.o(.text.eeprom_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eeprom_flush &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
</UL>

<P><STRONG><a name="[149]"></a>eeprom_get_char</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eeprom_1.o(.text.eeprom_get_char))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
</UL>

<P><STRONG><a name="[ce]"></a>eeprom_init</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, eeprom_1.o(.text.eeprom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = eeprom_init &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>eeprom_put_char</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eeprom_1.o(.text.eeprom_put_char))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>

<P><STRONG><a name="[cf]"></a>gc_execute_line</STRONG> (Thumb, 6392 bytes, Stack size 168 bytes, gcode_1.o(.text.gc_execute_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = gc_execute_line &rArr; mc_arc &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceleration_scaling
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_on_input_action
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_analog_action
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_digital_action
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[ee]"></a>gc_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gcode_1.o(.text.gc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gc_init &rArr; settings_read_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>gc_sync_position</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gcode_1.o(.text.gc_sync_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_sync_position &rArr; system_convert_array_steps_to_mpos
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[dc]"></a>hypot_f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nuts_bolts_1.o(.text.hypot_f))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[f1]"></a>inoutputs_init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, inoutputs.o(.text.inoutputs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inoutputs_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Timer_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>jog_execute</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, jog_1.o(.text.jog_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = jog_execute &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[123]"></a>limit_value_by_axis_maximum</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, nuts_bolts_1.o(.text.limit_value_by_axis_maximum))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[118]"></a>limits_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, limits_1.o(.text.limits_disable))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[f7]"></a>limits_get_state</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, limits_1.o(.text.limits_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = limits_get_state &rArr; GetLimitsState &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLimitsState
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[f8]"></a>limits_go_home</STRONG> (Thumb, 1934 bytes, Stack size 184 bytes, limits_1.o(.text.limits_go_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = limits_go_home &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_state_flag
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_y_axis_steps
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_x_axis_steps
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLimitsState
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[100]"></a>limits_init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, limits_1.o(.text.limits_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = limits_init &rArr; EnableLimitsINT &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableLimitsINT
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[101]"></a>limits_soft_check</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, limits_1.o(.text.limits_soft_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = limits_soft_check &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[6a]"></a>main</STRONG> (Thumb, 458 bytes, Stack size 72 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = main &rArr; protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inoutputs_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_limits_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_reset_read_buffer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e2]"></a>mc_arc</STRONG> (Thumb, 952 bytes, Stack size 120 bytes, motion_control_1.o(.text.mc_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mc_arc &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_check_full_buffer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[db]"></a>mc_dwell</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, motion_control_1.o(.text.mc_dwell))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mc_dwell &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[117]"></a>mc_homing_cycle</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, motion_control_1.o(.text.mc_homing_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mc_homing_cycle &rArr; limits_go_home &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_disable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[e0]"></a>mc_line</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, motion_control_1.o(.text.mc_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_check_full_buffer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[ec]"></a>mc_probe_cycle</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, motion_control_1.o(.text.mc_probe_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = mc_probe_cycle &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_configure_invert_mask
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_check_full_buffer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[9f]"></a>mc_reset</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, motion_control_1.o(.text.mc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_stop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLimitIT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[14a]"></a>memcpy_from_eeprom_with_checksum</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, eeprom_1.o(.text.memcpy_from_eeprom_with_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memcpy_from_eeprom_with_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>

<P><STRONG><a name="[11f]"></a>memcpy_to_eeprom_with_checksum</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, eeprom_1.o(.text.memcpy_to_eeprom_with_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = memcpy_to_eeprom_with_checksum &rArr; eeprom_flush &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_build_info
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>

<P><STRONG><a name="[e7]"></a>outputs_analog_action</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, inoutputs.o(.text.outputs_analog_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = outputs_analog_action &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_analog_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[121]"></a>outputs_analog_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, inoutputs.o(.text.outputs_analog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = outputs_analog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[120]"></a>outputs_analog_set</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, inoutputs.o(.text.outputs_analog_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = outputs_analog_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_analog_action
</UL>

<P><STRONG><a name="[e5]"></a>outputs_digital_action</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, inoutputs.o(.text.outputs_digital_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = outputs_digital_action &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[fd]"></a>plan_buffer_line</STRONG> (Thumb, 1368 bytes, Stack size 128 bytes, planner_1.o(.text.plan_buffer_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = plan_buffer_line &rArr; __hardfp_lround &rArr; _dfix_r &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_y_axis_steps
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_x_axis_steps
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[113]"></a>plan_check_full_buffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, planner_1.o(.text.plan_check_full_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[124]"></a>plan_compute_profile_nominal_speed</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, planner_1.o(.text.plan_compute_profile_nominal_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = plan_compute_profile_nominal_speed &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[128]"></a>plan_cycle_reinitialize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, planner_1.o(.text.plan_cycle_reinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plan_cycle_reinitialize &rArr; planner_recalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[157]"></a>plan_discard_current_block</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, planner_1.o(.text.plan_discard_current_block))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[141]"></a>plan_get_block_buffer_available</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, planner_1.o(.text.plan_get_block_buffer_available))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[f4]"></a>plan_get_current_block</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, planner_1.o(.text.plan_get_current_block))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[156]"></a>plan_get_exec_block_exit_speed_sqr</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, planner_1.o(.text.plan_get_exec_block_exit_speed_sqr))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[155]"></a>plan_get_system_motion_block</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, planner_1.o(.text.plan_get_system_motion_block))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[e8]"></a>plan_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, planner_1.o(.text.plan_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = plan_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[10c]"></a>plan_sync_position</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, planner_1.o(.text.plan_sync_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plan_sync_position
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_y_axis_steps
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_x_axis_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[12a]"></a>plan_update_velocity_profile_parameters</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, planner_1.o(.text.plan_update_velocity_profile_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = plan_update_velocity_profile_parameters &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[12b]"></a>printFloat</STRONG> (Thumb, 504 bytes, Stack size 72 bytes, print_1.o(.text.printFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = printFloat &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
</UL>

<P><STRONG><a name="[12d]"></a>printFloat_CoordValue</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, print_1.o(.text.printFloat_CoordValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
</UL>

<P><STRONG><a name="[12e]"></a>printFloat_RateValue</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, print_1.o(.text.printFloat_RateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = printFloat_RateValue &rArr; printFloat &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[12f]"></a>printString</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, print_1.o(.text.printString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = printString
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_help
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
</UL>

<P><STRONG><a name="[130]"></a>print_uint8_base10</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, print_1.o(.text.print_uint8_base10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
</UL>

<P><STRONG><a name="[11a]"></a>probe_configure_invert_mask</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, probe_1.o(.text.probe_configure_invert_mask))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[11b]"></a>probe_get_state</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, probe_1.o(.text.probe_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[10b]"></a>probe_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, probe_1.o(.text.probe_init))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>probe_state_monitor</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, probe_1.o(.text.probe_state_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = probe_state_monitor
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
</UL>

<P><STRONG><a name="[114]"></a>protocol_auto_cycle_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, protocol_1.o(.text.protocol_auto_cycle_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocol_auto_cycle_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[c1]"></a>protocol_buffer_synchronize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, protocol_1.o(.text.protocol_buffer_synchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceleration_scaling
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_on_input_action
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_analog_action
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_digital_action
</UL>

<P><STRONG><a name="[c8]"></a>protocol_exec_rt_system</STRONG> (Thumb, 970 bytes, Stack size 24 bytes, protocol_1.o(.text.protocol_exec_rt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = protocol_exec_rt_system &rArr; report_realtime_status &rArr; limits_get_state &rArr; GetLimitsState &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_accessory_overrides
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_motion_overrides
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_alarm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_state_flag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[c9]"></a>protocol_execute_realtime</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, protocol_1.o(.text.protocol_execute_realtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_accessory_override_flag
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_on_input_action
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[10e]"></a>protocol_main_loop</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, protocol_1.o(.text.protocol_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>read_float</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, nuts_bolts_1.o(.text.read_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_float &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[131]"></a>report_alarm_message</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, report_1.o(.text.report_alarm_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_alarm_message &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[13a]"></a>report_build_info</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, report_1.o(.text.report_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_build_info &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[13b]"></a>report_execute_startup_message</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, report_1.o(.text.report_execute_startup_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = report_execute_startup_message &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[e4]"></a>report_feedback_message</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, report_1.o(.text.report_feedback_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = report_feedback_message &rArr; printString
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[13c]"></a>report_gcode_modes</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, report_1.o(.text.report_gcode_modes))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = report_gcode_modes &rArr; printFloat_RateValue &rArr; printFloat &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[13d]"></a>report_grbl_help</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, report_1.o(.text.report_grbl_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = report_grbl_help &rArr; printString
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[13e]"></a>report_grbl_settings</STRONG> (Thumb, 1906 bytes, Stack size 40 bytes, report_1.o(.text.report_grbl_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = report_grbl_settings &rArr; printFloat &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[10d]"></a>report_init_message</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, report_1.o(.text.report_init_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = report_init_message &rArr; printString
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>report_ngc_parameters</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, report_1.o(.text.report_ngc_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = report_ngc_parameters &rArr; settings_read_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[11c]"></a>report_probe_parameters</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, report_1.o(.text.report_probe_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = report_probe_parameters &rArr; printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[133]"></a>report_realtime_status</STRONG> (Thumb, 1196 bytes, Stack size 120 bytes, report_1.o(.text.report_realtime_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = report_realtime_status &rArr; limits_get_state &rArr; GetLimitsState &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_state
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_control_get_state
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_get_realtime_rate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_rx_buffer_available
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_block_buffer_available
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[147]"></a>report_startup_line</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, report_1.o(.text.report_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = report_startup_line &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[ef]"></a>report_status_message</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, report_1.o(.text.report_status_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_status_message &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[142]"></a>serial_get_rx_buffer_available</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial_1.o(.text.serial_get_rx_buffer_available))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[104]"></a>serial_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, serial_1.o(.text.serial_init))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>serial_read</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, serial_1.o(.text.serial_read))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[108]"></a>serial_reset_read_buffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_1.o(.text.serial_reset_read_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>serial_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial_1.o(.text.serial_write))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sendch
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
</UL>

<P><STRONG><a name="[105]"></a>settings_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, settings_1.o(.text.settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = settings_init &rArr; settings_restore &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>settings_read_build_info</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, settings_1.o(.text.settings_read_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = settings_read_build_info &rArr; memcpy_to_eeprom_with_checksum &rArr; eeprom_flush &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[d7]"></a>settings_read_coord_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, settings_1.o(.text.settings_read_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = settings_read_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[14d]"></a>settings_read_startup_line</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, settings_1.o(.text.settings_read_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = settings_read_startup_line &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[14b]"></a>settings_restore</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, settings_1.o(.text.settings_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = settings_restore &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_put_char
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[14f]"></a>settings_store_build_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings_1.o(.text.settings_store_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = settings_store_build_info &rArr; memcpy_to_eeprom_with_checksum &rArr; eeprom_flush &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[150]"></a>settings_store_global_setting</STRONG> (Thumb, 1012 bytes, Stack size 16 bytes, settings_1.o(.text.settings_store_global_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = settings_store_global_setting &rArr; system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_configure_invert_mask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_put_char
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_analog_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[152]"></a>settings_store_startup_line</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, settings_1.o(.text.settings_store_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = settings_store_startup_line &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[e1]"></a>settings_write_coord_data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, settings_1.o(.text.settings_write_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = settings_write_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[10a]"></a>spi_limits_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32utilities.o(.text.spi_limits_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = spi_limits_init &rArr; SPIInit &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>spindle_compute_pwm_value</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, spindle_control_1.o(.text.spindle_compute_pwm_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spindle_compute_pwm_value &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[145]"></a>spindle_get_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spindle_control_1.o(.text.spindle_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[109]"></a>spindle_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, spindle_control_1.o(.text.spindle_init))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[a2]"></a>spindle_set_speed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spindle_control_1.o(.text.spindle_set_speed))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
</UL>

<P><STRONG><a name="[e3]"></a>spindle_set_state</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, spindle_control_1.o(.text.spindle_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spindle_set_state &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[11d]"></a>spindle_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spindle_control_1.o(.text.spindle_stop))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>

<P><STRONG><a name="[da]"></a>spindle_sync</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spindle_control_1.o(.text.spindle_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[151]"></a>st_generate_step_dir_invert_masks</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, stepper_1.o(.text.st_generate_step_dir_invert_masks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_generate_step_dir_invert_masks
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[143]"></a>st_get_realtime_rate</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stepper_1.o(.text.st_get_realtime_rate))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[11e]"></a>st_go_idle</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stepper_1.o(.text.st_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[f5]"></a>st_prep_buffer</STRONG> (Thumb, 1752 bytes, Stack size 104 bytes, stepper_1.o(.text.st_prep_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = st_prep_buffer &rArr; spindle_compute_pwm_value &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_exec_block_exit_speed_sqr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_system_motion_block
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_discard_current_block
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[fa]"></a>st_reset</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stepper_1.o(.text.st_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = st_reset &rArr; st_generate_step_dir_invert_masks
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[129]"></a>st_update_plan_block_parameters</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stepper_1.o(.text.st_update_plan_block_parameters))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[f6]"></a>st_wake_up</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stepper_1.o(.text.st_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_wake_up
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[106]"></a>stepper_init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stepper_1.o(.text.stepper_init))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>system_check_safety_door_ajar</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_1.o(.text.system_check_safety_door_ajar))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[f3]"></a>system_check_travel_limits</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, system_1.o(.text.system_check_travel_limits))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[135]"></a>system_clear_exec_accessory_overrides</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_1.o(.text.system_clear_exec_accessory_overrides))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[132]"></a>system_clear_exec_alarm</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_1.o(.text.system_clear_exec_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[134]"></a>system_clear_exec_motion_overrides</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_1.o(.text.system_clear_exec_motion_overrides))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[fe]"></a>system_clear_exec_state_flag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_1.o(.text.system_clear_exec_state_flag))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[144]"></a>system_control_get_state</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_1.o(.text.system_control_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[ed]"></a>system_convert_array_steps_to_mpos</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, system_1.o(.text.system_convert_array_steps_to_mpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_convert_array_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[fb]"></a>system_convert_corexy_to_x_axis_steps</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_1.o(.text.system_convert_corexy_to_x_axis_steps))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[fc]"></a>system_convert_corexy_to_y_axis_steps</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_1.o(.text.system_convert_corexy_to_y_axis_steps))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[139]"></a>system_execute_line</STRONG> (Thumb, 1208 bytes, Stack size 32 bytes, system_1.o(.text.system_execute_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_build_info
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_help
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[137]"></a>system_execute_startup</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, system_1.o(.text.system_execute_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[df]"></a>system_flag_wco_change</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_1.o(.text.system_flag_wco_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[107]"></a>system_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_1.o(.text.system_init))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>system_set_exec_accessory_override_flag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_1.o(.text.system_set_exec_accessory_override_flag))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[a0]"></a>system_set_exec_alarm</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_1.o(.text.system_set_exec_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLimitIT
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[a8]"></a>system_set_exec_motion_override_flag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_1.o(.text.system_set_exec_motion_override_flag))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
</UL>

<P><STRONG><a name="[a5]"></a>system_set_exec_state_flag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_1.o(.text.system_set_exec_state_flag))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[102]"></a>timing_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32utilities.o(.text.timing_init))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>uart_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32utilities.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>uart_sendch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32utilities.o(.text.uart_sendch))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>

<P><STRONG><a name="[e6]"></a>wait_on_input_action</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, inoutputs.o(.text.wait_on_input_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = wait_on_input_action &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInputByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[158]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[10f]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[c7]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[1b5]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[115]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[111]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[154]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
</UL>

<P><STRONG><a name="[ff]"></a>__hardfp_lround</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, lround.o(i.__hardfp_lround))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_lround &rArr; _dfix_r &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[d3]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_roundf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[116]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[ea]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[d2]"></a>__hardfp_truncf</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, truncf.o(i.__hardfp_truncf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_truncf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_analog_action
</UL>

<P><STRONG><a name="[15d]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[15a]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[15c]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[159]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[15b]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[165]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[168]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16d]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[16b]"></a>_ddiv</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[16c]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[16e]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[162]"></a>_dfix_r</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfixr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _dfix_r &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
</UL>

<P><STRONG><a name="[1b7]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1b8]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[16f]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
</UL>

<P><STRONG><a name="[170]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[173]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[171]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[167]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[16a]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[172]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[160]"></a>_drnd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[174]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[164]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lround
</UL>

<P><STRONG><a name="[176]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[177]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[179]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[17a]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[17b]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[17c]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[17d]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[17e]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[178]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[64]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1ba]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1bb]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[166]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[163]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_truncf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9e]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[8c]"></a>UART_SetConfig</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[125]"></a>planner_recalculate</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, planner_1.o(.text.planner_recalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = planner_recalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[140]"></a>report_util_axis_values</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, report_1.o(.text.report_util_axis_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = report_util_axis_values &rArr; printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[175]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[169]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

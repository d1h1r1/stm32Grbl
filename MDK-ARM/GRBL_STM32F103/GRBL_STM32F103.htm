<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [GRBL_STM32F103\GRBL_STM32F103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image GRBL_STM32F103\GRBL_STM32F103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Sat Apr 19 11:26:19 2025
<BR><P>
<H3>Maximum Stack Usage =        688 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[98]">delay_sec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9c]">protocol_execute_realtime</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f1xx_it.o(.text.TIM2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f1xx_it.o(.text.TIM3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f1xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[35]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[57]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[130]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[131]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[132]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[aa]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceilf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceleration_scaling
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_axis_steps_to_mpos
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceleration_scaling
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_fcmplt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmplt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_fcmpge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceleration_scaling
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpeq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_axis_steps_to_mpos
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[135]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[136]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[137]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[52]"></a>_fsqrt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[53]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[47]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[46]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[54]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[55]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
</UL>

<P><STRONG><a name="[56]"></a>_dfix_r</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dfixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _dfix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[13b]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HandleLimitIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLimitIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI3_IRQHandler &rArr; HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[9f]"></a>FLASH_PageErase</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(.text.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[5b]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32f1xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_ResetBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32utilities.o(.text.GPIO_ResetBits))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inoutputs_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_stop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_digital_action
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_SetBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32utilities.o(.text.GPIO_SetBits))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_digital_action
</UL>

<P><STRONG><a name="[60]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
</UL>

<P><STRONG><a name="[a0]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[61]"></a>HAL_FLASH_Program</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, stm32f1xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[9e]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>

<P><STRONG><a name="[62]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 518 bytes, Stack size 44 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[5e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Disable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[5c]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[8a]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[63]"></a>HAL_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>HAL_InitTick</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[66]"></a>HAL_MspInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[7b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[68]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[69]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 824 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[86]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[6b]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[6c]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tim.o(.text.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Encoder_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Encoder_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>HandleControlIT</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, system.o(.text.HandleControlIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HandleControlIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>HandleLimitIT</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, limits.o(.text.HandleLimitIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleLimitIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>HandleStepResetIT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stepper.o(.text.HandleStepResetIT))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>HandleStepSetIT</STRONG> (Thumb, 658 bytes, Stack size 16 bytes, stepper.o(.text.HandleStepSetIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleStepSetIT &rArr; spindle_set_speed &rArr; Spindle_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_speed
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_state_monitor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>HandleUartIT</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, serial.o(.text.HandleUartIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleUartIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_motion_override_flag
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_accessory_override_flag
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>LL_GPIO_Init</STRONG> (Thumb, 184 bytes, Stack size 36 bytes, stm32f1xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[79]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(.text.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[7f]"></a>LL_TIM_BDTR_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_BDTR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_BDTR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[7d]"></a>LL_TIM_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[7e]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, stm32f1xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[78]"></a>LL_USART_Init</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32f1xx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[7a]"></a>MX_GPIO_Init</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>MX_TIM1_Init</STRONG> (Thumb, 264 bytes, Stack size 120 bytes, tim.o(.text.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MX_TIM1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>MX_TIM2_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_TIM2_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>MX_TIM3_Init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_TIM3_Init &rArr; LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>MX_TIM4_Init</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, tim.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_USART1_UART_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>Spindle_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32utilities.o(.text.Spindle_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spindle_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_speed
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
</UL>

<P><STRONG><a name="[89]"></a>Spindle_Enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32utilities.o(.text.Spindle_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spindle_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_speed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; HandleStepSetIT &rArr; spindle_set_speed &rArr; Spindle_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.TIM3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepResetIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; HandleUartIT &rArr; mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>acceleration_scaling</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, settings.o(.text.acceleration_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = acceleration_scaling &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[91]"></a>convert_delta_vector_to_unit_vector</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, nuts_bolts.o(.text.convert_delta_vector_to_unit_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = convert_delta_vector_to_unit_vector &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[10e]"></a>coolant_get_state</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, coolant_control.o(.text.coolant_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[94]"></a>coolant_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, coolant_control.o(.text.coolant_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coolant_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>coolant_set_state</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, coolant_control.o(.text.coolant_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coolant_set_state
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[96]"></a>coolant_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, coolant_control.o(.text.coolant_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coolant_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>

<P><STRONG><a name="[97]"></a>coolant_sync</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, coolant_control.o(.text.coolant_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = coolant_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[73]"></a>delay_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nuts_bolts.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[98]"></a>delay_sec</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nuts_bolts.o(.text.delay_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceilf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
</UL>

<P><STRONG><a name="[9d]"></a>eeprom_flush</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, eeprom.o(.text.eeprom_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eeprom_flush &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
</UL>

<P><STRONG><a name="[111]"></a>eeprom_get_char</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eeprom.o(.text.eeprom_get_char))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
</UL>

<P><STRONG><a name="[a1]"></a>eeprom_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, eeprom.o(.text.eeprom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eeprom_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>eeprom_put_char</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eeprom.o(.text.eeprom_put_char))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>

<P><STRONG><a name="[a3]"></a>gc_execute_line</STRONG> (Thumb, 4520 bytes, Stack size 128 bytes, gcode.o(.text.gc_execute_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceleration_scaling
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_on_input_action
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_analog_action
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_digital_action
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[bf]"></a>gc_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gcode.o(.text.gc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gc_init &rArr; settings_read_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>gc_sync_position</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gcode.o(.text.gc_sync_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gc_sync_position &rArr; system_convert_array_steps_to_mpos &rArr; system_convert_axis_steps_to_mpos &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[b3]"></a>hypot_f</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nuts_bolts.o(.text.hypot_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hypot_f &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[c2]"></a>inoutputs_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inoutputs.o(.text.inoutputs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inoutputs_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>jog_execute</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, jog.o(.text.jog_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = jog_execute &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[c7]"></a>limit_value_by_axis_maximum</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nuts_bolts.o(.text.limit_value_by_axis_maximum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = limit_value_by_axis_maximum &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[e4]"></a>limits_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, limits.o(.text.limits_disable))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[ff]"></a>limits_get_state</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, limits.o(.text.limits_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = limits_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[c8]"></a>limits_go_home</STRONG> (Thumb, 1086 bytes, Stack size 112 bytes, limits.o(.text.limits_go_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = limits_go_home &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_y_axis_steps
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_x_axis_steps
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_state_flag
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[d9]"></a>limits_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, limits.o(.text.limits_init))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[cf]"></a>limits_soft_check</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, limits.o(.text.limits_soft_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = limits_soft_check &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 406 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = main &rArr; protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inoutputs_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_reset_read_buffer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b1]"></a>mc_arc</STRONG> (Thumb, 932 bytes, Stack size 104 bytes, motion_control.o(.text.mc_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[ad]"></a>mc_dwell</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motion_control.o(.text.mc_dwell))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mc_dwell &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[e3]"></a>mc_homing_cycle</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, motion_control.o(.text.mc_homing_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mc_homing_cycle &rArr; limits_go_home &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[af]"></a>mc_line</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, motion_control.o(.text.mc_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_check_full_buffer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[b5]"></a>mc_probe_cycle</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, motion_control.o(.text.mc_probe_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mc_probe_cycle &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_configure_invert_mask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[6e]"></a>mc_reset</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, motion_control.o(.text.mc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_reset &rArr; st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_stop
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLimitIT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlIT
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[112]"></a>memcpy_from_eeprom_with_checksum</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, eeprom.o(.text.memcpy_from_eeprom_with_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy_from_eeprom_with_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>

<P><STRONG><a name="[ed]"></a>memcpy_to_eeprom_with_checksum</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, eeprom.o(.text.memcpy_to_eeprom_with_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = memcpy_to_eeprom_with_checksum &rArr; eeprom_flush &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_build_info
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>

<P><STRONG><a name="[bb]"></a>outputs_analog_action</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inoutputs.o(.text.outputs_analog_action))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[119]"></a>outputs_analog_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inoutputs.o(.text.outputs_analog_init))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[b9]"></a>outputs_digital_action</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, inoutputs.o(.text.outputs_digital_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = outputs_digital_action &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[cd]"></a>plan_buffer_line</STRONG> (Thumb, 1000 bytes, Stack size 104 bytes, planner.o(.text.plan_buffer_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = plan_buffer_line &rArr; lround &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_y_axis_steps
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_x_axis_steps
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[e6]"></a>plan_check_full_buffer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, planner.o(.text.plan_check_full_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[ee]"></a>plan_compute_profile_nominal_speed</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, planner.o(.text.plan_compute_profile_nominal_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[f0]"></a>plan_cycle_reinitialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, planner.o(.text.plan_cycle_reinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = plan_cycle_reinitialize &rArr; planner_recalculate &rArr; st_update_plan_block_parameters &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[121]"></a>plan_discard_current_block</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, planner.o(.text.plan_discard_current_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plan_discard_current_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[109]"></a>plan_get_block_buffer_available</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, planner.o(.text.plan_get_block_buffer_available))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[c4]"></a>plan_get_current_block</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, planner.o(.text.plan_get_current_block))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[11f]"></a>plan_get_exec_block_exit_speed_sqr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, planner.o(.text.plan_get_exec_block_exit_speed_sqr))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[11e]"></a>plan_get_system_motion_block</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(.text.plan_get_system_motion_block))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[bc]"></a>plan_reset</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, planner.o(.text.plan_reset))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[db]"></a>plan_sync_position</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, planner.o(.text.plan_sync_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plan_sync_position
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_y_axis_steps
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_corexy_to_x_axis_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[f2]"></a>plan_update_velocity_profile_parameters</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, planner.o(.text.plan_update_velocity_profile_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = plan_update_velocity_profile_parameters &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[f3]"></a>printFloat</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, print.o(.text.printFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = printFloat &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
</UL>

<P><STRONG><a name="[f5]"></a>printFloat_CoordValue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, print.o(.text.printFloat_CoordValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = printFloat_CoordValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
</UL>

<P><STRONG><a name="[f6]"></a>printFloat_RateValue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, print.o(.text.printFloat_RateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = printFloat_RateValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[f7]"></a>printString</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, print.o(.text.printString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = printString
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_help
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
</UL>

<P><STRONG><a name="[f8]"></a>print_uint8_base10</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, print.o(.text.print_uint8_base10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
</UL>

<P><STRONG><a name="[e8]"></a>probe_configure_invert_mask</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, probe.o(.text.probe_configure_invert_mask))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[e9]"></a>probe_get_state</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, probe.o(.text.probe_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[da]"></a>probe_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, probe.o(.text.probe_init))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>probe_state_monitor</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, probe.o(.text.probe_state_monitor))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
</UL>

<P><STRONG><a name="[e7]"></a>protocol_auto_cycle_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, protocol.o(.text.protocol_auto_cycle_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocol_auto_cycle_start
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[8d]"></a>protocol_buffer_synchronize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, protocol.o(.text.protocol_buffer_synchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceleration_scaling
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_digital_action
</UL>

<P><STRONG><a name="[9b]"></a>protocol_exec_rt_system</STRONG> (Thumb, 958 bytes, Stack size 24 bytes, protocol.o(.text.protocol_exec_rt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = protocol_exec_rt_system &rArr; st_prep_buffer &rArr; spindle_compute_pwm_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_accessory_overrides
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_motion_overrides
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_alarm
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_state_flag
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[9c]"></a>protocol_execute_realtime</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, protocol.o(.text.protocol_execute_realtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_accessory_override_flag
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[dd]"></a>protocol_main_loop</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, protocol.o(.text.protocol_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>read_float</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, nuts_bolts.o(.text.read_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = read_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[f9]"></a>report_alarm_message</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, report.o(.text.report_alarm_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_alarm_message &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[103]"></a>report_build_info</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, report.o(.text.report_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_build_info &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[104]"></a>report_execute_startup_message</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, report.o(.text.report_execute_startup_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = report_execute_startup_message &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[b8]"></a>report_feedback_message</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, report.o(.text.report_feedback_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = report_feedback_message &rArr; printString
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[105]"></a>report_gcode_modes</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, report.o(.text.report_gcode_modes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_gcode_modes &rArr; printFloat_RateValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[106]"></a>report_grbl_help</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, report.o(.text.report_grbl_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = report_grbl_help &rArr; printString
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[107]"></a>report_grbl_settings</STRONG> (Thumb, 1004 bytes, Stack size 40 bytes, report.o(.text.report_grbl_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = report_grbl_settings &rArr; printFloat &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[dc]"></a>report_init_message</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, report.o(.text.report_init_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = report_init_message &rArr; printString
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>report_ngc_parameters</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, report.o(.text.report_ngc_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = report_ngc_parameters &rArr; settings_read_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[ea]"></a>report_probe_parameters</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, report.o(.text.report_probe_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = report_probe_parameters &rArr; printFloat_CoordValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[fb]"></a>report_realtime_status</STRONG> (Thumb, 860 bytes, Stack size 72 bytes, report.o(.text.report_realtime_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = report_realtime_status &rArr; printFloat_RateValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_state
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_control_get_state
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_get_realtime_rate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_rx_buffer_available
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_block_buffer_available
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[10f]"></a>report_startup_line</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, report.o(.text.report_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = report_startup_line &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[c0]"></a>report_status_message</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, report.o(.text.report_status_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_status_message &rArr; print_uint8_base10
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[10a]"></a>serial_get_rx_buffer_available</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, serial.o(.text.serial_get_rx_buffer_available))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[d3]"></a>serial_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, serial.o(.text.serial_init))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>serial_read</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, serial.o(.text.serial_read))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[d7]"></a>serial_reset_read_buffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, serial.o(.text.serial_reset_read_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>serial_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial.o(.text.serial_write))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sendch
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
</UL>

<P><STRONG><a name="[d4]"></a>settings_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, settings.o(.text.settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = settings_init &rArr; settings_restore &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>settings_read_build_info</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, settings.o(.text.settings_read_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = settings_read_build_info &rArr; memcpy_to_eeprom_with_checksum &rArr; eeprom_flush &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[a9]"></a>settings_read_coord_data</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, settings.o(.text.settings_read_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = settings_read_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[115]"></a>settings_read_startup_line</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, settings.o(.text.settings_read_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = settings_read_startup_line &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_from_eeprom_with_checksum
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[113]"></a>settings_restore</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, settings.o(.text.settings_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = settings_restore &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_put_char
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[117]"></a>settings_store_build_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, settings.o(.text.settings_store_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = settings_store_build_info &rArr; memcpy_to_eeprom_with_checksum &rArr; eeprom_flush &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[118]"></a>settings_store_global_setting</STRONG> (Thumb, 832 bytes, Stack size 16 bytes, settings.o(.text.settings_store_global_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = settings_store_global_setting &rArr; system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_configure_invert_mask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_put_char
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outputs_analog_init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[11b]"></a>settings_store_startup_line</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, settings.o(.text.settings_store_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = settings_store_startup_line &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[b0]"></a>settings_write_coord_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, settings.o(.text.settings_write_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = settings_write_coord_data &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_to_eeprom_with_checksum
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[11c]"></a>spindle_compute_pwm_value</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, spindle_control.o(.text.spindle_compute_pwm_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spindle_compute_pwm_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
</UL>

<P><STRONG><a name="[10d]"></a>spindle_get_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spindle_control.o(.text.spindle_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[d8]"></a>spindle_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spindle_control.o(.text.spindle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spindle_init &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[71]"></a>spindle_set_speed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spindle_control.o(.text.spindle_set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spindle_set_speed &rArr; Spindle_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
</UL>

<P><STRONG><a name="[b7]"></a>spindle_set_state</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, spindle_control.o(.text.spindle_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spindle_set_state &rArr; spindle_compute_pwm_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Disable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[eb]"></a>spindle_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spindle_control.o(.text.spindle_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spindle_stop &rArr; Spindle_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>

<P><STRONG><a name="[ac]"></a>spindle_sync</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, spindle_control.o(.text.spindle_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Enable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spindle_Disable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[11a]"></a>st_generate_step_dir_invert_masks</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, stepper.o(.text.st_generate_step_dir_invert_masks))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = st_generate_step_dir_invert_masks
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[10b]"></a>st_get_realtime_rate</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stepper.o(.text.st_get_realtime_rate))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[ec]"></a>st_go_idle</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stepper.o(.text.st_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_go_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[c5]"></a>st_prep_buffer</STRONG> (Thumb, 2248 bytes, Stack size 80 bytes, stepper.o(.text.st_prep_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = st_prep_buffer &rArr; spindle_compute_pwm_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceilf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_exec_block_exit_speed_sqr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_system_motion_block
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_discard_current_block
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[ca]"></a>st_reset</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, stepper.o(.text.st_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[f1]"></a>st_update_plan_block_parameters</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stepper.o(.text.st_update_plan_block_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st_update_plan_block_parameters &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[c6]"></a>st_wake_up</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stepper.o(.text.st_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st_wake_up &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[d5]"></a>stepper_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stepper.o(.text.stepper_init))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>system_check_safety_door_ajar</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system.o(.text.system_check_safety_door_ajar))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[c3]"></a>system_check_travel_limits</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, system.o(.text.system_check_travel_limits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_check_travel_limits
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[fd]"></a>system_clear_exec_accessory_overrides</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(.text.system_clear_exec_accessory_overrides))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[fa]"></a>system_clear_exec_alarm</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(.text.system_clear_exec_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[fc]"></a>system_clear_exec_motion_overrides</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(.text.system_clear_exec_motion_overrides))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[c9]"></a>system_clear_exec_state_flag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system.o(.text.system_clear_exec_state_flag))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[10c]"></a>system_control_get_state</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system.o(.text.system_control_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[b6]"></a>system_convert_array_steps_to_mpos</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, system.o(.text.system_convert_array_steps_to_mpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_convert_array_steps_to_mpos &rArr; system_convert_axis_steps_to_mpos &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_axis_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[122]"></a>system_convert_axis_steps_to_mpos</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system.o(.text.system_convert_axis_steps_to_mpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_convert_axis_steps_to_mpos &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>

<P><STRONG><a name="[cb]"></a>system_convert_corexy_to_x_axis_steps</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(.text.system_convert_corexy_to_x_axis_steps))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[cc]"></a>system_convert_corexy_to_y_axis_steps</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(.text.system_convert_corexy_to_y_axis_steps))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[102]"></a>system_execute_line</STRONG> (Thumb, 978 bytes, Stack size 32 bytes, system.o(.text.system_execute_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_build_info
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_help
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[100]"></a>system_execute_startup</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, system.o(.text.system_execute_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[ae]"></a>system_flag_wco_change</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(.text.system_flag_wco_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[d6]"></a>system_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(.text.system_init))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>system_set_exec_accessory_override_flag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system.o(.text.system_set_exec_accessory_override_flag))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[6f]"></a>system_set_exec_alarm</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system.o(.text.system_set_exec_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLimitIT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[77]"></a>system_set_exec_motion_override_flag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system.o(.text.system_set_exec_motion_override_flag))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
</UL>

<P><STRONG><a name="[74]"></a>system_set_exec_state_flag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system.o(.text.system_set_exec_state_flag))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleUartIT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleStepSetIT
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[d1]"></a>timing_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32utilities.o(.text.timing_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timing_init &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>uart_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32utilities.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>uart_sendch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32utilities.o(.text.uart_sendch))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>

<P><STRONG><a name="[ba]"></a>wait_on_input_action</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inoutputs.o(.text.wait_on_input_action))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[129]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[123]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[125]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[126]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[127]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[128]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[13c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[de]"></a>atan2f</STRONG> (Thumb, 598 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = atan2f &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[13f]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, ceilf.o(i.ceilf), UNUSED)

<P><STRONG><a name="[99]"></a>ceilf</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ceilf.o(i.ceilf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ceilf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[e1]"></a>cosf</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[e0]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[11d]"></a>floorf</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[ce]"></a>lround</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lround.o(i.lround))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lround &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[a6]"></a>roundf</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, roundf.o(i.roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = roundf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[e2]"></a>sinf</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[b2]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[93]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[a5]"></a>truncf</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, truncf.o(i.truncf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = truncf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ef]"></a>planner_recalculate</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, planner.o(.text.planner_recalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = planner_recalculate &rArr; st_update_plan_block_parameters &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
